// Generated by dts-bundle-generator v4.3.0

/// <reference types="prop-types" />
/// <reference types="react" />

declare const _default: (
  locales: Array<string>
) => {
  new (props: Readonly<any>): {
    componentDidMount(): void
    render(): JSX.Element
    context: any
    setState<K extends 'url'>(
      state:
        | {
            url?: string
          }
        | ((
            prevState: Readonly<{
              url?: string
            }>,
            props: Readonly<any>
          ) =>
            | {
                url?: string
              }
            | Pick<
                {
                  url?: string
                },
                K
              >)
        | Pick<
            {
              url?: string
            },
            K
          >,
      callback?: () => void
    ): void
    forceUpdate(callback?: () => void): void
    readonly props: Readonly<any> &
      Readonly<{
        children?: React.ReactNode
      }>
    state: Readonly<{
      url?: string
    }>
    refs: {
      [key: string]: React.ReactInstance
    }
    shouldComponentUpdate?(
      nextProps: Readonly<any>,
      nextState: Readonly<{
        url?: string
      }>,
      nextContext: any
    ): boolean
    componentWillUnmount?(): void
    componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void
    getSnapshotBeforeUpdate?(
      prevProps: Readonly<any>,
      prevState: Readonly<{
        url?: string
      }>
    ): any
    componentDidUpdate?(
      prevProps: Readonly<any>,
      prevState: Readonly<{
        url?: string
      }>,
      snapshot?: any
    ): void
    componentWillMount?(): void
    UNSAFE_componentWillMount?(): void
    componentWillReceiveProps?(nextProps: Readonly<any>, nextContext: any): void
    UNSAFE_componentWillReceiveProps?(
      nextProps: Readonly<any>,
      nextContext: any
    ): void
    componentWillUpdate?(
      nextProps: Readonly<any>,
      nextState: Readonly<{
        url?: string
      }>,
      nextContext: any
    ): void
    UNSAFE_componentWillUpdate?(
      nextProps: Readonly<any>,
      nextState: Readonly<{
        url?: string
      }>,
      nextContext: any
    ): void
  }
  new (props: any, context?: any): {
    componentDidMount(): void
    render(): JSX.Element
    context: any
    setState<K extends 'url'>(
      state:
        | {
            url?: string
          }
        | ((
            prevState: Readonly<{
              url?: string
            }>,
            props: Readonly<any>
          ) =>
            | {
                url?: string
              }
            | Pick<
                {
                  url?: string
                },
                K
              >)
        | Pick<
            {
              url?: string
            },
            K
          >,
      callback?: () => void
    ): void
    forceUpdate(callback?: () => void): void
    readonly props: Readonly<any> &
      Readonly<{
        children?: React.ReactNode
      }>
    state: Readonly<{
      url?: string
    }>
    refs: {
      [key: string]: React.ReactInstance
    }
    shouldComponentUpdate?(
      nextProps: Readonly<any>,
      nextState: Readonly<{
        url?: string
      }>,
      nextContext: any
    ): boolean
    componentWillUnmount?(): void
    componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void
    getSnapshotBeforeUpdate?(
      prevProps: Readonly<any>,
      prevState: Readonly<{
        url?: string
      }>
    ): any
    componentDidUpdate?(
      prevProps: Readonly<any>,
      prevState: Readonly<{
        url?: string
      }>,
      snapshot?: any
    ): void
    componentWillMount?(): void
    UNSAFE_componentWillMount?(): void
    componentWillReceiveProps?(nextProps: Readonly<any>, nextContext: any): void
    UNSAFE_componentWillReceiveProps?(
      nextProps: Readonly<any>,
      nextContext: any
    ): void
    componentWillUpdate?(
      nextProps: Readonly<any>,
      nextState: Readonly<{
        url?: string
      }>,
      nextContext: any
    ): void
    UNSAFE_componentWillUpdate?(
      nextProps: Readonly<any>,
      nextState: Readonly<{
        url?: string
      }>,
      nextContext: any
    ): void
  }
  getInitialProps({ req, res }: { req: any; res: any }): Promise<{}>
  contextType?: React.Context<any>
}
export default _default

export {}
